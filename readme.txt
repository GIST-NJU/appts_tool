1. How to run the APPTS tool
There are two ways to run the tool .

(1) Way 1
Prerequisites: Java 11 or higher versions should be installed .

Users can type the following command in the command line:

java -jar appts.jar strength modelFileName [cutoffTime]

For example:
java -jar appts.jar 2 MCAC_00.ctw 300

The tool will generate a series of  2-way covering arrays with different sizes for the model specified by 'MCAC_00.ctw' file in 300 seconds.
The cutoff time is the maximum running time of the tool. If you do not set it, 3600 seconds will be used.
The covering arrays generated by the tool are saved into CSV format files.
If the size of  a covering array is n,  the name of the output file is 'modelFileNamePrefix_result_n.csv', where 'modelFileNamePrefix' is the name prefix of the model file.
For example, if  a covering array with 16 test cases is generated for ' MCAC_00.ctw' test model, then the name of the output file is 'MCAC_00_result_16.csv'.


(2) Way 2
Prerequisites: Docker Engine and Docker Compose should be installed .

Users can type the following command in the command line:
docker-compose up

The above command will run the tool using the configurations specified by the docker-compose.yml.
The contents of the docker-compose.yml are as followsï¼š

version: '2'
services:
  web:
    image: yanwang22/appts:v3
    command: /mytest/appts strength modelFileName [cutoffTime]
    working_dir: /app
    volumes:
      - ./:/app

In docker-compose.yml file, 'yanwang22/appts:v3' is the image, which has been uploaded to Docker Hub repository, and '/mytest/appts' is the executable binary of the tool in the container.
The 'strength', 'modelFileName' and 'cutoffTime' have same meaning as they are in the first way to run the tool, and they must be replaced by the specific values.


2. Input file format
The tool uses CTWedge format file as input.


3. Categories 
The tool competes in the following categories:

Models with no constraints
   With only boolean parameters
   MCA
   Uniform with n > 2

Models containing constraints
   With boolean parameters and logical operators in constraints
   With also enumerative parameters (MCA), and logical and equal operators in constraints
   